概述

浏览器窗口有一个history对象，用来保存浏览历史。

如果当前窗口先后访问了三个网址，那么history对象就包括三项，history.length属性就等于3.

history.length === 3

history对象提供了一系列方法，允许在浏览历史之间移动。

back(): 移动到上一个访问页面，等同于浏览器的后退键。

forward(): 移动到下一个访问页面，等同于浏览器的前进键。

go(): 接受一个整数作为参数，移动到该整数指定的页面，比如go(1)相当于forward(), go(-1)相当于back().

history.back()

history.forward()

history.go(-2) 

如果移动的位置超出了访问历史的边界，以上三个方法并不报错，而是默默的失败。

history.go(0) 相当于刷新当前页面

history.pushState()

HTML5为history对象添加了两个新方法： history.pushState()和history.replaceState(), 用来在浏览历史中添加和修改记录

if (!!(window.history) && history.pushState) {
  //支持history api
} else {
  // 不支持
}

上面代码可以用来检查，当前浏览器是否支持history api 如果不支持的话，可以考虑使用Polyfill库history.js

history.pushState方法接受三个参数，依次为：

state: 一个与指定网址相关的状态对象，popstate事件触发时，该对象传入回调函数。如果不需要这个对象，此处可以填null

title: 新页面的标题，但是所有浏览器目前都忽略这个值，因此这里可以填null.

url: 新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。

假定当前网址是example.com/1.html,我们使用pushState方法在浏览记录中添加一个新对象。

var stateObj = {foo: 'bar'}

history.pushState(stateObj, 'page2', '2.html')

添加上面这个新记录后，浏览器地址栏立刻显示example.com/2.html，但并不会跳转到2.html，甚至也不会检查2.html是否存在，它只是成为浏览历史中的最新记录。假定这时你访问了google.com，然后点击了倒退按钮，页面的url将显示2.html，但是内容还是原来的1.html。你再点击一次倒退按钮，url将显示1.html，内容不变。

