/*
 * @Author: wangliang
 * @Date: 2018-08-13 19:43:00
 * @Last Modified by: wangliang
 * @Last Modified time: 2018-08-14 07:14:03
 */

面试答题

1.在ES5中js有5种基础数据类型和一种复杂数据类型.5种基础数据类型有undefined, null, string, number, boolean, 复杂数据类型为object

在ES6中又新增了一种新的数据类型Symbol  创建Symbol类型的数据不需要使用new操作符.

2,对于string, number, boolean, undefined这4种数据类型，可以通过typeof来进行判断数据类型，对于null, 可以让其与null进行全等的判断，

对于Object, 如果不为null, 且typeof 的值为object 则表示为object

3. typeof 后面的括号是可以省略的，因为typeof是一个一元操作符，而不是一个方法

4.判断一个变量是否是一个数组，有三种方法？  1）arr.constructor === Array  2) Array.isArray(arr) 3)Object.prototype.toString.call(arr) === '[object Array]'

5.数组有1）栈方法push() pop()   2）队列方法 shift() unshift() 3)排序方法  reverse() sort() 4)操作方法  concat() slice() splice() join()

5)位置方法 indexOf() lastIndexOf()  6)遍历方法  forEach() filter() every() some() map() 7)归并方法  reduce() reduceRight()

8) ES6新增方法 from()


6. push() pop() shift() unshift() reverse() sort() splice() 这七个方法对原数组有影响

7. 对数组去重
  ES3:
  Array.prototype.qcArray = function (arr) {
  let res = []
  console.log('qcArray')
  for (let i = 0; i < arr.length; i++) {
    let flag = true
    for (let j = 0; j < res.length; j++) {
      if (arr[i] === res[j]) {
        flag = false
        break;
      }
    }
    if (flag) {
      res.push(arr[i])
    }
  }
  console.log(res)
  return res
 }

  ES5：
  // 与新数组里的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (res.indexOf(arr[i]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  // 与原数组后面的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (arr.indexOf(arr[i + 1]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  Array.prototype.qcArray = function(arr) {
    for (let i = 0; i < arr.length; i++) {
      for (let j = i + 1; j < arr.length; j++) {
        if (arr[i] === arr[j]) {
          arr.splice(j, 1)
          i--
          break;
        }
      }
    }
    return arr
  }


  Array.prototype.qcArray = function(arr) {
    arr = arr.sort((a, b) => a > b)

    for (let i = 0; i < arr.length; i++) {
      if (arr[i] === arr[i+1]) {
        arr.splice(i, 1)
        i--
      }
    }

    return arr
  }

  ES6：

  Array.prototype.qcArray = function(arr) {
    return Array.from(new Set(arr))
  }

  Array.prototype.qcArray = function(arr) {
    return [...new Set(arr)]
  }
