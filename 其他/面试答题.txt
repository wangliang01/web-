/*
 * @Author: wangliang
 * @Date: 2018-08-13 19:43:00
 * @Last Modified by: wangliang
 * @Last Modified time: 2018-08-14 10:47:06
 */

面试答题

1.在ES5中js有5种基础数据类型和一种复杂数据类型.5种基础数据类型有undefined, null, string, number, boolean, 复杂数据类型为object

在ES6中又新增了一种新的数据类型Symbol  创建Symbol类型的数据不需要使用new操作符.

2,对于string, number, boolean, undefined这4种数据类型，可以通过typeof来进行判断数据类型，对于null, 可以让其与null进行全等的判断，

对于Object, 如果不为null, 且typeof 的值为object 则表示为object

3. typeof 后面的括号是可以省略的，因为typeof是一个一元操作符，而不是一个方法

4.判断一个变量是否是一个数组，有三种方法？  1）arr.constructor === Array  2) Array.isArray(arr) 3)Object.prototype.toString.call(arr) === '[object Array]'

5.数组有1）栈方法push() pop()   2）队列方法 shift() unshift() 3)排序方法  reverse() sort() 4)操作方法  concat() slice() splice() join()

5)位置方法 indexOf() lastIndexOf()  6)遍历方法  forEach() filter() every() some() map() 7)归并方法  reduce() reduceRight()

8) ES6新增方法 from()


6. push() pop() shift() unshift() reverse() sort() splice() 这七个方法对原数组有影响

7. 对数组去重
  ES3:
  Array.prototype.qcArray = function (arr) {
  let res = []
  for (let i = 0; i < arr.length; i++) {
    let flag = true
    for (let j = 0; j < res.length; j++) {
      if (arr[i] === res[j]) {
        flag = false
        break;
      }
    }
    if (flag) {
      res.push(arr[i])
    }
  }
  console.log(res)
  return res
 }

 Array.prototype.qcArray = function(arr) {
   let res = []
    for (let i = 0; i < arr.length; i++) {
      let flag = true
      for (let j = i + 1; j < arr.length; j++) {
        if (arr[i] === arr[j]) {
          flag = false
          break;
        }
      }
      if (flag) {
        res.push(arr[i])
      }
    }
    return res
 }


 Array.prototype.qcArray = function(arr) {
   for (let i = 0; i < arr.length; i++) {
     for (let j = i + 1; j < arr.length; j++) {
       if (arr[i] === arr[j]) {
         arr.splice(j, 1)
         i--
         break;
       }
     }
   }
   return arr
 }

  ES5：
  // 与新数组里的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (res.indexOf(arr[i]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  // 与原数组后面的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (arr.indexOf(arr[i + 1]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  Array.prototype.qcArray = function(arr) {
    for (let i = 0; i < arr.length; i++) {
      for (let j = i + 1; j < arr.length; j++) {
        if (arr[i] === arr[j]) {
          arr.splice(j, 1)
          i--
          break;
        }
      }
    }
    return arr
  }


  Array.prototype.qcArray = function(arr) {
    arr = arr.sort((a, b) => a > b)

    for (let i = 0; i < arr.length; i++) {
      if (arr[i] === arr[i+1]) {
        arr.splice(i, 1)
        i--
      }
    }

    return arr
  }

  ES6：

  Array.prototype.qcArray = function(arr) {
    return Array.from(new Set(arr))
  }

  Array.prototype.qcArray = function(arr) {
    return [...new Set(arr)]
  }

8. 1)html集合（iframe, image）或者nodelist, 2）arguments对象, 3)jquery对象

  可以通过Array.prototype.slice.call(obj) 将伪数组转成数组  也可以用[].slice.call(obj)

9. 字符串常用的方法有：
  concat(), split(), slice(), substr(), substring(), toUpperCase(), toLowerCase(), charAt(), charCodeAt(), indexOf(), lastIndexOf(), match() replace() search()

  ES6: includes(), startsWith() endsWith(), fixed() padStart() padEnd() 模板字符串, charPointAt(), repeat(), trim(), trimLeft(), trimRight()

10. slice(start, end) substring(start, end), substr(start, length)

slice()参数中可以接收负值，而substring, substr如果参数中有负值，则按0处理

11. 有两种方法： 1) a === a   如果为false , 则表明 a 的值为 false 2)  先判断是否是数字， 再使用isNaN()判断

12. undefined, null, 0, -0, NaN, ""

13. !!temp  将一个变量转成Boolean值

14. new操作符执行时会发生四个过程： 1）创建一个新对象， 2）将作用域绑定到新对象上，即确定this指向， 3）执行函数中的代码， 4）将新对象返回

15.如果new操作符中显示地返回return, 如果返回值不是一个对象，则忽略，如果返回的是一个对象，则返回这个对象

16.继承的实现方式有：
  1）原型链继承：
  核心： 子类的原型指向父类的实例

  例子：
  // 父类
  function Parent() {
    this.sayName = function() {
      console.log('您的名字：', this.name)
    }
  }

  // 子类
  function Child(name) {
    this.name = name
  }

  // 子类的原型指向父类的实例
  Child.prototype = new Parent()

  var child = new Child('zhangsan')

  child.sayName()
