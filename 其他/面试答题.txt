/*
 * @Author: wangliang
 * @Date: 2018-08-13 19:43:00
 * @Last Modified by: wangliang
 * @Last Modified time: 2018-08-14 07:14:03
 */

面试答题

1.在ES5中js有5种基础数据类型和一种复杂数据类型.5种基础数据类型有undefined, null, string, number, boolean, 复杂数据类型为object

在ES6中又新增了一种新的数据类型Symbol  创建Symbol类型的数据不需要使用new操作符.

2,对于string, number, boolean, undefined这4种数据类型，可以通过typeof来进行判断数据类型，对于null, 可以让其与null进行全等的判断，

对于Object, 如果不为null, 且typeof 的值为object 则表示为object

3. typeof 后面的括号是可以省略的，因为typeof是一个一元操作符，而不是一个方法

4.判断一个变量是否是一个数组，有三种方法？  1）arr.constructor === Array  2) Array.isArray(arr) 3)Object.prototype.toString.call(arr) === '[object Array]'

5.数组有1）栈方法push() pop()   2）队列方法 shift() unshift() 3)排序方法  reverse() sort() 4)操作方法  concat() slice() splice() join()

5)位置方法 indexOf() lastIndexOf()  6)遍历方法  forEach() filter() every() some() map() 7)归并方法  reduce() reduceRight()

8) ES6新增方法 from()


6. push() pop() shift() unshift() reverse() sort() splice() 这七个方法对原数组有影响

7. 对数组去重
  ES3:
  Array.prototype.qcArray = function (arr) {
  let res = []
  console.log('qcArray')
  for (let i = 0; i < arr.length; i++) {
    let flag = true
    for (let j = 0; j < res.length; j++) {
      if (arr[i] === res[j]) {
        flag = false
        break;
      }
    }
    if (flag) {
      res.push(arr[i])
    }
  }
  console.log(res)
  return res
 }

  ES5：
  // 与新数组里的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (res.indexOf(arr[i]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  // 与原数组后面的项进行比较
  Array.prototype.qcArray = function(arr) {
    let res = []
    for (let i = 0; i < arr.length; i++) {
      if (arr.indexOf(arr[i + 1]) === -1) {
        res.push(arr[i])
      }
    }
    return res
  }

  Array.prototype.qcArray = function(arr) {
    for (let i = 0; i < arr.length; i++) {
      for (let j = i + 1; j < arr.length; j++) {
        if (arr[i] === arr[j]) {
          arr.splice(j, 1)
          i--
          break;
        }
      }
    }
    return arr
  }


  Array.prototype.qcArray = function(arr) {
    arr = arr.sort((a, b) => a > b)

    for (let i = 0; i < arr.length; i++) {
      if (arr[i] === arr[i+1]) {
        arr.splice(i, 1)
        i--
      }
    }

    return arr
  }

  ES6：

  Array.prototype.qcArray = function(arr) {
    return Array.from(new Set(arr))
  }

  Array.prototype.qcArray = function(arr) {
    return [...new Set(arr)]
  }

  8.常见的伪数组有：1）通过DOM方法获取的dom元素集合; 2)nodeList 3）函数中的arguments对象

  将伪数组转变成数组的方法有： 1) Array.prototype.slice.call() 2) [].slice.call()

  9.字符串的方法有：charAt(index) charCodeAt(index) charPointAt(index) indexOf(char) lastIndexOf(char) slice(start, end)  substring(start, end) substr(start, length) toUpperCase() toLowerCase()  match() replace() search() concat() split()

  ES6扩展的方法  includes()  startsWith() endsWith()  padStart()  padEnd() trim() trimLeft() trimRight() 模板字符串 fixed()

  10. slice(start, end) substring(strat, end)  都是接受两个索引，唯一的区别是slice可以接收负值，而substring会将负值都默认作为0处理

  而substr(start, length) 接受一个索引，一个长度值，都不能为负数

  11. 1）先判断这个数是否是Number类型，再用isNaN判断
    2） 将变量与自身进行比较

  12. undefined, null, 0, -0, NaN, ""

  13. 1)创建一个对象， 将this指向这个对象， 执行构造函数中的代码， 返回这个对象

  14. 1）原型链式继承
      核心原理： 子类的原型指向父类的实例
      优点：实现了让子类去继承父类及父类的原型链上的属性和方法
      缺点：1）不能实现多继承， 2）不能传参 3） 要在子类的原型上添加方法，必须写在核心代码之后，否则不生效

      2）借用构建函数式继承
      核心原理：在子类中重新执行一遍父类的构造函数
      优点：1）可以实现多继承 2）可以传参
      缺点： 1）只能继承父类实例上的属性和方法，而不能我不懂父类原型上的属性和方法

      3）组合式继承
      核心原理： 1）在子类中重新执行一遍父类的构造函数
                2）子类的原型指向父类的实例
                3）将父类的contructor指向子类的构造函数

      优点：所有原型式继承和借用构造函数式继承的优点
      缺点：1）父类的构造函数被执行了两遍，消耗性能， 2）子类实例上的属性和方法在父类实例上也存在一份，占用了内存

      4）原型式继承
      原型式继承跟前面三种有一点区别，前面三种都是构造函数继承，而原型式继承是对象之间的继承
      function create(a) {
        function F{}
        F.prototype = a
        return new F()
      }

      var b = create(a)

      在ES5中，新增了一个方法，也中create(),用来创建一个对象


      5）寄生式继承
      function B() {
        var b = create(a)
        b.name = ''
        b.age = ''
        return b
      }

      6)组合寄生式继承
      核心原理：解决组合式的那两个小问题  B.prototype.__proto__ = A.prototype
      var p = Object.create(A.prototype)
      B.prototype = p
      p.constructor = B

    15. !!

    16. 如果构造函数中显示地返因return ,看返回的结果是否是一个对象，如果是一个对象，则直接返回这个对象，如果不是一个对象，则忽略

    17.

    18 async 异步下载， defer 延迟执行

    19. promise的实例
      function a () {
        return Promise((resolve, reject) => {

          ...
        })
      }

      Promise.resolve() Promise.reject() Promise.then() Promise.catch() Promise.all([])