Promise是一个构造函数，自己身上有all, reject, resolve这几个眼熟的方法，原型上有then， catch等同样很眼熟的方法。

获取promise实例

var promise = new Promise((resolve, reject) => {
  // 做一些异步操作
  setTimeout(function() {
    console.log('执行完成')
    resolve('随便什么数据')
  })
})

Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve, reject, 分别表示异步操作成功后的回调函数和异步操作执行失败的回调函数，其实这里用成功和失败来描述，按照标准来讲，resolve是将Promise的状态置为fullfiled, reject是将Promise的状态置为rejected.不过在我们开始阶段可以先这么理解。后面再细究概念。

在上面的代码中，我们执行了一个异步操作中，也就是setTimeout，2秒后，输出执行完成并且调用resolve方法。

运行代码，会在2秒后输出执行完成。注意，我只是new了一个对象，并没有调用它，我们传进去的函数就已经执行了，这里需要注意的一个细节。所以我们用Promise的时候一般是包在一个函数中，在需要的时候去运行这个函数，如：

function runAsync() {
  var promise = new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('执行完成')
      console.log('随便什么数据')
    }, 2000)
  })
}

这时候你应该有两个疑问：1.包装这么一个函数有毛线用？2.resolve('')这是干毛的？


我们继续来讲，在我们包装好的函数最后，会return 出Promise对象，也就是说，执行这个函数我们得到了一个Promise对象，还记得Promise对象上有then、catch方法吧？这就是强大之处了，看下面的代码：

runAsync().then(function(data) {
  console.log(data)
})

在runAsync()的返回上直接调用then方法，then接收一个参数，并且会拿到我们在runAsync中调用resolve时传的参数。运行这段代码，会在2s后输出执行完毕，紧接着输出随便什么数据。

这时候你应该有所领悟了，原来then里面的函数就是跟我们平时的回调函数是一个意思，能够在runAsync这个异步任务执行完成之后被执行，这就是Promise的作用了，简单来讲，就是能把原来的回调写法分离出来，在异步操作执行完后，用链式调用的方法执行回调函数。

你可能会不屑一顾那么牛逼轰轰的Promise就这点能耐？我把回调函数封装一下，给runAsync 传进去不也一样吗，就像这样：

function runAsync(callback) {
  setTimeout(() => {
    console.log('执行完毕')
    callback('随便什么数据')
  }, 2000)
}

runAsync((res) => {
  console.log(res)
})

效果也是一样的，还费劲用Promise干嘛？那么问题来啦，有多层回调该怎么办？如果callback也是一个异步操作，而且执行完后也需要有相应的回调函数，该怎么办呢？总不能再定义一个callback2，然后给callback传进去吧，而Promise的优势在于，可以在then方法中继续写Promise对象并返回，然后继续调用then来进行回调操作。

链式操作

所以，在表面上看，Promise只是能够简化层层回调的写法，而实质上，Promise的精髓是状态、用维护状态，传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多，所以使用Promise的正确场景是这样的：

runAsync1()
  .then(function(data) {
    console.log(data)
    return runAsync2()
  })
  .then(function(data) {
    console.log(data)
    return runAsync3()
  })
  .then(function(data) {
    console.log(data)
  })

reject的用法

到这里，你应该对Promise是什么玩意有了最基本的了解。那么我们接着来看看ES6的Promise还有哪些功能。我们光用了resolve,还没有用reject呢，它是做什么的呢？事实上，我们前面的例子都是只有执行成功的回调，还没有失败的情况，reject的作用就是把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行失败情况的回调，看下面的代码



catch的用法

我们知道Promise对象除了then方法，还有一个catch方法，它是做什么用呢？其实它和then的第二个参数一样，用来指定reject的回调，用法是这样：

getNumber()
.then(res => {
  console.log(res)
})
.catch(err => {
  console.log(err)
})

效果和定在then的第二个参数里面一样，不过它还有另外一个作用；在执行resolve的回调时，如果抛出异常了（代码出错了）， 那么并不会报错卡死js,而是会进入到catch方法中，请看下面的代码


all的用法
Promise的all方法提供了并执行异步操作的能力，并且在所有异步执行完毕后才执行回调，我们仍旧使用上面定义好的runAsync1, runAsync2, runAsync3这三个函数，看下面的例子：

Promise.all([runAsync1(), runAsync2(), runAsync3()])
.then(res => {
  console.log(res)
})
.catch(err => {
  console.log(err)
})

race的用法
all方法的效果实际上是「谁跑的慢，以谁为准执行回调」，那么相对的就有另一个方法「谁跑的快，以谁为准执行回调」，这就是race方法，这个词本来就是赛跑的意思。