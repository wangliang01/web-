1.为什么翻开一个H5页面会有一长段白屏时间？

因为这这期间，页面做了很多事情：
初始化webview -> 请求页面 -> 下载数据 -> 解析HTML -> 请求js/css资源 -> dom渲染 -> 解析JS执行 -> JS请求数据 -> 解析渲染 -> 下载渲染图片

一般页面在dom渲染后才能展示，可以发现，H5首屏渲染白屏问题的原因关键在于，如何优化减少从请求下载页面到渲染之间这段时间的耗时。


2.如何优化？

上述打开一个页面的过程有很多优化点，包括前端和客户端，常规的前端和后端的性能优化已有前辈总结过最佳实践，主要是：
1）降低请求量：合并资源，减少HTTP请求数，minify/gzip压缩，webP,lazyLoad。

2）加快请求速度：预解析DNS,减少域名数，并行加载，CDN分发。

3）缓存：HTTP协议缓存请求，离线缓存manifest,离线数据缓存localStorage

4）渲染：JS/CSS优化，加载顺序，服务端渲染模板直出。

一般情况下，我们只要对照这个列表，对比差异就基本能搞定绝大部分前端性能问题了。不过我们在里面仔细再分析下，对首屏启动速度影响最大的就是网络请求，包括请求HTML,CSS，image等静态资源和展示数据的请求。

那么将H5相关页面和资源打包到客户端中，然后客户端将展示数据传给页面，通过webView加载显示，这样几乎不需要网络请求，webview只要渲染页面，执行js即可，这样体验岂不是很完美？

3.具体怎么实现？
整体思路看起来比较清晰，但是其中有几个关键问题需要解决：

3.1 本地H5页面如何和native通信：

本地H5页面如何和native通信的方式基本有三种：jsapi, URL Scheme和字符串替换。具体不同方式适合使用场景有所不同：

jsapi:客户端提供接口，注入API让Javascript调用，直接执行相应Native代码，适用于需要通过交互，进行数据请求的场景

URL Scheme: Web端发送URL Scheme请求，之后Native拦截到请求并根据URL Scheme及所带的参数进行相关操作。适用于进行页面跳转的场景。

字符串替换：客户端读取本地H5后，通过对H5中的约定的标记位进行字符串替换，然后加载展示页面。适用于没有复杂交互，只通过页面渲染数据的场景。
