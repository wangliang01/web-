正则表达式-元字符

下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为:

\ 将下一个字符标记为一个特殊字符,或一个原义字符,或一个后引用,或一个八进制转义字符.

^ 匹配输入字符串的起始位置

$ 匹配输入字符串的结束位置

* 匹配前面的子表达式零次或者多次

+ 匹配前面的子表达式一次或者多次

? 匹配前面的子表达式最多一次(零次或者一次)

{n} 匹配前面的子表达式n次,n为非负整数

{n,} 匹配前面的子表达式至少n次,n为非负整数

{n,m} 匹配前面的子表达式至少n次,最多m次,n,m为非负整数 

? 当该字符紧跟在任何一个其他限制符(*, +, ?, {n}, {n,}, {n,m})后面时,匹配模式是非贪婪的,非贪婪模式尽可能少的匹配所搜索的字符串,而默认的贪婪模式则尽可能多的匹配所搜索的字符串.

(?:pattern) 匹配pattern但不获取匹配结果,也就是说这是一个非获取匹配,不进行存储供以后使用,这在使用或字符(|)来组合一个模式的各个部分是很有用的.例如 industr(?:y|ies) 就是一个比 industry|industries更简略的表达式

(?=pattern) 正向预查,在任何匹配pattern的字符串开始处匹配查找字符串.这是一个非获取匹配,也就是说,该匹配不需要获取供以后使用.
(?!pattern) 负向预查,在任何不匹配pattern的字符串开始处匹配查找字符串,这是一个非获取匹配,也就是说,该匹配不需要获取供以后使用.

(?<=pattern) 反向肯定预查,与正向肯定预查类似,只是方向相反.

x|y 匹配x或y

[xyz] 匹配x,y,z中的任意一个字符

[^xyz] 匹配除x,y,z中的任意一个字符

[a-z] 匹配a-z的任意一个字符

[^a-z] 匹配除a-z的任意一个字符

\b 匹配单词的边界,也就是指单词与空格间的位置

\B 匹配非单词边界

\d 匹配数字0-9, 等价于[0-9]

\D 匹配非数字字符,等价于[^0-9]

\f 匹配一个换页符

\n 匹配一个换行符

\r 匹配一个回车符

\s 匹配任何空白字符 等价于[\f\n\t\v]

\S 匹配任何非空白字符 等价于[^\f\n\t\v]

\t 匹配一个制表符

\v 匹配一个垂直制表符

\w 匹配字母,数字,下划线, 等价于[a-zA-Z0-9_]

\W 匹配非字母,数字,下划线,等价于[^a-zA-Z0-9_]

\num 匹配num, 其中num是一个正整数,对所获取的匹配的引用  例如 (.)\1匹配两个连续相同的字符



