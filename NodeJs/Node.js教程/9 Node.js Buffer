Node.js Buffer（缓冲区）

JavaScript语言自身只有字符串数据类型，没有二进制数据类型。
但在处理像TCP流或文件流时，必须使用到二进制数据，因此在node.js中，定义了一个Buffer类，该类用来创建一个专门存放二进制数据的缓存区。

在Node.js中，Buffer类是随Node内核一起发布的核心库。Buffer库为Node.js带来了一种存储原始数据的方法。可以让Node.js处理二进制数据，每当需要在Node.js中处理I/O操作中移动的数据时，就有可能使用Buffer库。原始数据库存储在Buffer类的实例中，一个Buffer类似于一个整数数组，但它对应于V8堆内存之外的一块原始内存。

在v6.0之前创建Buffer对象直接使用new Buffer()构造函数来创建对象实例，但是Buffer对内存的权限操作相比很大，可以直接捕获一些敏感信息，所以在v6.0以后，官方文档里面建议使用 Buffer.from() 接口去创建Buffer对象。

Buffer与字符编码
Buffer实例一般用于表示编码字符的序列，比如UTF-8, UCS2, Base64,或十六进制编码的数据。通过使用显示的字符编码，就可以在Buffer实例与变通的JavaScript字符串之间进行相互转换。

const buf = Buffer.from('runoob', 'ascii')

console.log(buf.toString('hex'))

console.log(buf.toString('base64'))

Node.js 目前支持的字符编码包括：

ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。

utf8 - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。

utf16le - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。

ucs2 - utf16le 的别名。

base64 - Base64 编码。

latin1 - 一种把 Buffer 编码成一字节编码的字符串的方式。

binary - latin1 的别名。

hex - 将每个字节编码为两个十六进制字符。


创建Buffer类

Buffer提供了以下API来创建Buffer类：
  Buffer.alloc(size[, fill[, encoding]]):返回一个指定大小的Buffer实例，如果没有设置fill, 则默认填满0
  Buffer.allocUnsafe(size): 返回一个指定大小的Buffer实例，但是它不会被初始化，所以它可以包含敏感的数据
  Buffer.allocUnsafeSlow(size)
  Buffer.from(array): 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）
  Buffer.from(arrayBuffer[, byteOffset[, length]])： 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。
  Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例
  Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例