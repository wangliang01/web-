Node.js路由
我们要为路由提供请求的URL和其他需要的Get及Post参数，随后路由需要根据这些数据来执行相应的代码。
因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器确实值得探讨，但这里暂定其为它们的HTTP服务器的功能。
function onRequest(request, response) {
  ...
}
我们需要的所有数据都包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递，但是为了解析这些数据，我们需要额外的Node.js模块，它们分别是url和querystring模块。

当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。

现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径

server.js 文件代码：
var http = require("http");
var url = require("url");
 
function start() {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log("Request for " + pathname + " received.");
    response.writeHead(200, {"Content-Type": "text/plain"});
    response.write("Hello World");
    response.end();
  }
 
  http.createServer(onRequest).listen(8888);
  console.log("Server has started.");
}
 
exports.start = start;

好了，我们的应用现在可以通过请求的URL路径来区别不同请求了 -- 这使我们得以使用路由来将请求以URL路径为基准映射到处理程序上。

在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。

现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：

router.js 
function route(pathname) {
  console.log('About to route a request for ' +　pathname)
}

exports.route = route

如你所见，这段代码什么也没有干，不过对于现在来说，这是应该的，在添加更多的逻辑之前，我们先来看看如何把路由器和服务器整合起来。

我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较轻松地添加路由模块。

首先，我们来扩展一下服务器的start函数，以便将路由函数可以作为参数传递过去，server.js文件代码如下：