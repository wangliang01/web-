Node.js全局对象

JavaScript中有一个特殊对象，称为全局对象(Global Object), 它及其所有属性都可以在程序的任何地方访问，即全局变量。

在浏览器JavaScript中，通常window是全局对象，而Node.js中全局对象是global，所有全局变量，除了global本身，都是global对象的属性。

在Node.js我们可以直接访问到global属性，而不需要在应用中包含它

全局对象与全局变量
global最根本的作用是作为全局变量的宿主。按照ECMAScript的定义，满足以下条件的变量是全局变量

在最外层定义的变量

全局对象的属性

隐式定义的变量

当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在Node.js中你不可能在最外层定义变量，因为所有的用户代码都是属于当前模块，而模块本身不是最外层上下文。

注意：永远使用var定义变量以避免引入全局变量，因为全局变量会污染命名空间，提高代码的耦合风险。

__filename

__filename表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同，如果在模块中，返回的值是模块文件的路径

实例

创建文件main.js，代码如下所示：
// 输出全局变量__filename的值
console.log(__firname)

__dirname
__dirname表示当前执行脚本所在的目录。


setTimeout(cb, ms)

process

process是一个全局变量，即global对象的属性。
它用于描述当前Node.js进程状态的对象，提供了一个与操作系统的简单的接口，通常在你写本地命令行程序的时候，少不了要和它打交道，下面将会介绍process对象一些最常用的成员方法。


序号	事件 & 描述
1	exit
当进程准备退出时触发。
2	beforeExit
当 node 清空事件循环，并且没有其他安排时触发这个事件。通常来说，当没有进程安排时 node 退出，但是 'beforeExit' 的监听器可以异步调用，这样 node 就会继续执行。
3	uncaughtException
当一个异常冒泡回到事件循环，触发这个事件。如果给异常添加了监视器，默认的操作（打印堆栈跟踪信息并退出）就不会发生。
4	Signal 事件
当进程接收到信号时就触发。信号列表详见标准的 POSIX 信号名，如 SIGINT、SIGUSR1 等。


Process 属性
Process 提供了很多有用的属性，便于我们更好的控制系统的交互：

序号.	属性 & 描述
1	stdout
标准输出流。
2	stderr
标准错误流。
3	stdin
标准输入流。
4	argv
argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。
5	execPath
返回执行当前脚本的 Node 二进制文件的绝对路径。
6	execArgv
返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。
7	env
返回一个对象，成员为当前 shell 的环境变量
8	exitCode
进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。
9	version
Node 的版本，比如v0.10.18。
10	versions
一个属性，包含了 node 的版本和依赖.
11	config
一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。
12	pid
当前进程的进程号。
13	title
进程名，默认值为"node"，可以自定义该值。
14	arch
当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。
15	platform
运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'
16	mainModule
require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。