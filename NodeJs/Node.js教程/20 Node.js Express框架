Node.js Express框架
Express 简介

Express 是一个简洁而灵活的node.js Web应用框架，提供了一系列强大特性帮助你创建各种Web应用，和丰富的HTTP工具，使用Express 可以快速地搭建一个完整功能的网站。

Express框架核心特性：
  可以设置中间件来响应HTTP请求。
  定义了路由表用于执行不同的HTTP请求动作。
  可以通过向模板传递参数来动态渲染HTML页面

安装Express

安装Express并将其保存到依赖列表中：

npm install express -S

以上命令会将Express 框架安装在当前目录的node_modules目录中，node_modules目录下会自动创建express目录。以下几个重要的模块是需要与express框架一起安装的：

body-parser - node.js中间件，用于处理JSON，Raw, Text和URL编码的数据。
cookie-parser - 这就是一个解析Cookie的工具，通过req.cookies可以取到传过来的cookie,并把它们转成对象。
multer - node.js中间件，用于处理enctype= "mutipart/form-data"（设置表单的MIME编码）的表单数据。

npm install body-parser -S
npm install cookie-parser -S 
npm install multer -S 

查看express 版本号
npm list express

请求和响应

Express 应用使用回调函数的参数：request和response对象来处理请求和响应的数据。
app.get('/', function(req, res) {
  //...
})

request和response对象的具体介绍：

Request对象 - request对象表示HTTP请求，包含了请求查询字符串，参数，内容，HTTP头部等属性。常见属性有：

1. req.app - 当callback为外部文件时，用req.app访问express的实例
2. req.baseUrl - 获取路由当前安装的URL路径
3. req.body/ req.cookies - 获取（请求主体）/Cookies
4. req.fresh/req.state - 判断请求是否还【新鲜】
5. req.hostname/ req.ip - 获取主机名和ip地址
7. req.originalUrl - 获取原始请求URL
8. req.path - 获取请求路径
9. req.protocol - 获取协议类型
10. req.query - 获取URL的查询参数串
11. req.route - 获取当前匹配的路由
12. req.subdomains - 获取子域名
13. req.accepts() - 检查可接受的请求的文档类型
14. req.acceptsCharsets/req.acceptsEncodings/req.acceptsLanguages: 返回指定字符集的第一个可接受字符编码
15. req.get() - 获取指定的HTTP请求头
16. req.is() - 判断请求头Content-Type的MIME类型



Response对象 - response对象表示的HTTP响应，即在接收到请求时向客户端发送的HTTP响应数据。常见属性有：

1. res.app - 同req.app一样
2. res.append() - 追加指定HTTP头
3. res.set()在res.append()后将重置之前设置的头
4. res.cookie(name, value[, option]) - 设置Cookie
5. option: domain / expires / httpOnly / maxAge / path / secure / signed
6. res.clearCookie() - 清除cookie
7. res.download() - 传送指定路径的文件
8. res.get() - 返回指定的HTTP头
9. res.json() - 传送JSON响应
10. res.jsonp()：传送JSONP响应
11. res.location()：只设置响应的Location HTTP头，不设置状态码或者close response
12. res.redirect()：设置响应的Location HTTP头，并且设置状态码302
13. res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。
14. res.send()：传送HTTP响应
15. res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type
16. res.set()：设置HTTP头，传入object可以一次设置多个头
17. res.status()：设置HTTP状态码
18. res.type()：设置Content-Type的MIME类型

路由
我们已经我解了HTTP请求的基本应用，而路由决定了由谁(指定脚本)去响应客户端请求。
在HTTP请求中，我们可以通过路由提取出请求的URL以及GET/POST参数。
接下来我们扩展Hello World, 添加一些功能来处理更多类型的HTTP请求。
创建express_demo2.js文件，代码如下所示

var express = require('express');
var app = express();
 
//  主页输出 "Hello World"
app.get('/', function (req, res) {
   console.log("主页 GET 请求");
   res.send('Hello GET');
})
 
 
//  POST 请求
app.post('/', function (req, res) {
   console.log("主页 POST 请求");
   res.send('Hello POST');
})
 
//  /del_user 页面响应
app.get('/del_user', function (req, res) {
   console.log("/del_user 响应 DELETE 请求");
   res.send('删除页面');
})
 
//  /list_user 页面 GET 请求
app.get('/list_user', function (req, res) {
   console.log("/list_user GET 请求");
   res.send('用户列表页面');
})
 
// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求
app.get('/ab*cd', function(req, res) {   
   console.log("/ab*cd GET 请求");
   res.send('正则匹配');
})
 
 
var server = app.listen(8081, function () {
 
  var host = server.address().address
  var port = server.address().port
 
  console.log("应用实例，访问地址为 http://%s:%s", host, port)
 
})

静态文件

Express提供了内置的中间件express.static来设置静态文件如:图片， CSS, JavaScript等。
你可以使用express.static中间件来设置静态文件路径 ，例如，如果你将图片，CSS, JavaScript文件放在publick目录下，你可以这么写：
app.user(express.static('public'))