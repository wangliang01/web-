Node.js EventEmitter
Node.js所有的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件，一个fs.readStream对象会在文件被打开的时候发出一个事件。所有这些产生事件的对象都是events.EventEmitter的实例。

EventEmitter类
events模块只提供了一个对象：events.EventEmitter.EventEmitter的核心就是事件触发与事件监听器功能的封装。你可以通过require('events')来访问该模块。

//引入events模块
var events = require('events')

// 创建eventEmitter对象
var eventEmitter = new event.EventEmitter()

EventEmitter对象如果在实例化时发生错误，会触发error事件，当添加新的监听器时，newListener事件会触发，当监听 器被移除时，removeListener事件被触发。

下面我们用一个简单的例子说明EventEmitter的用法：

// event.js 文件
var eventEmitter = new require('events').EventEmitter()

eventEmitter.on('some_event', function() {
  console.log('some_event事件触发')
})

setTimeout(function() {
  eventEmitter.emit('some_event')
}, 1000)

EventEmitter的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter支持若干个事件监听器。
当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。

// event.js 
var events = require('events')

var emitter = new events.EventEmitter()

emitter.on('someEvent', function(arg1, arg2){
  console.log('listener1', arg1, arg2)
})

emitter.on('someEvent', function(arg1, arg2) { 
    console.log('listener2', arg1, arg2); 
}); 

emitter.emit('someEvent', 'arg1 参数', 'arg2 参数'); 

以上例子中，emitter为事件someEvent注册了两个事件监听器，然后触发了someEvent事件。运行结果可以看到两个事件监听器回调函数被先后调用。这就是EventEmitter最简单的用法。

EventEmitter提供了多个属性，如on和emit。on函数用于绑定事件函数，emit属性用于触发一个事件。接下来我们来具体看下EventEmitter的属性介绍。

error事件
EventEmitter定义了一个特殊的事件error，它包含了错误的语义，我们在遇到异常的时候通常会触发error事件。当error被触发时，EventEmitter规定如果没有响应的监听器，Node.js会把它当作异常，退出程序并输出错误信息。
我们一般要为会触发error事件的对象设置监听器，避免遇到错误整个程序崩溃。

var events = require('events')

var emitter = new events.EventEmitter()

emitter.emit('error')

继承EventEmitter
大多数时候我们不会直接使用EventEmitter，而是在对象中继承它。包括fs, net, http在内的，只是支持响应的核心模块都是EventEmitter的子类。

为什么要这样做呢？原因有两点：
首先，具有某个实体功能的对象实现事件符合语义，事件的监听和发生应该是一个对象的方法。
其次javaScript的对象机制是基于原型的，支持部分多重继承，继承EventEmitter不会打乱对象原有的继承关系。