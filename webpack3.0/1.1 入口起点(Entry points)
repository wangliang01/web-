入口起点（Entry Points）

正如我们在起步中提到的，在webpack配置中有多种定义entry属性，除了解释为什么它可能非常有用，我们还将向你展示如何去配置entry属性。

单个入口语法
用法： entry: string|Array<string>

webpack.config.js

module.exports = {
  entry: './path/to/my/entry/file.js'
}

entry属性的单个入口语法，是下面的简写：
module.exports = {
  entry:{
    main: './path/to/my/entry/file.js'
  }
}

当你向entry传入一个数组时会发生什么？
向entry属性传入[文件路径(file path)数组]将创建多个主入口。在你想要多个依赖文件一起注入，并且将它们的依赖导向到一个chunk时，传入数组的方式就很有用。
这种语法有个缺点：扩展性不够灵活

对象语法
用法： entry: {[entryChunkName: string]: string|Array<string>}

webpack.config.js

module.exports = {
  entry: {
    app: './src/app.js',
    vendors: '/src/vendors.js'
  }
}

对象语法会比较繁琐。然而，这是应用程序中定义入口的最可拓展的方式。

可扩展的webpack配置是指，可重用并且可以与其他配置组合使用，这是一种流行的技术，用于将关注点从环境，构建目标，运行时中分离。然后使用专门的工具（webpack-merge）将它们合并。

常用场景

以下列出一入入口配置和它们的实际用例：

分离应用程序(app)和第三方库(vendor)入口

webpack.config.js

module.exports = {
  entry: {
    app: './src/app.js',
    vendors: './src/vendors.js'
  }
}

这是什么？从表面上看，这告诉我们webpack从app.js和vendors.js开始创建依赖图。这些依赖图是彼此完全分离，互相独立的(每个bundle中都有一人webpack引导，这种方式比较常见于，只有一个入口起点（不包括vendor）的单页应用程序)

为什么？此设置允许你使用CommonsChunkPlugin从[应用程序bundle]中提取vendor引用到vendor bundle,并把引用vendor的部分替换为 __webpack.require__()调用。如果应用程序bundle中没有vendor代码，那么你可以在webpack中实现

称为长效缓存的通用模式。

多页面应用程序

webpack.config.js

module.exports = {
  entry: {
    pageOne: 'src/pageOne/index.js',
    pageTwo: 'src/pageTwo/index.js',
    pageThree: 'src/pageThree/index.js'
  }
}

这是什么？我们告诉webpack需要3个独立分离的依赖图

为什么？在多页应用中，服务吕将为你获取一个新的html文档，页面重新加载新文档，并且资源被重新下载。然而，这给了我们特殊的机会去做很多事。

使用CommonsChunkPlugin为每个页面间的应用程序共享代码创建bundle.由于入口起点增多，多页应用能够复用入口起点之间的大量代码/模块，从而可以极大地从这些技术中受益

根据经验：每个html文档只使用一个入口起点。



