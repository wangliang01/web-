插件(Plugins)

插件是webpack的支柱功能。webpack自身也是构建于，你在webpack配置中用到的相同的插件系统之上!

插件目的在于解决loader无法实现的其他事。

剖析

webpack插件是一个具有apply属性的JavaScript对象。apply属性会被webpack.compiler调用，并且compiler对象可在整个编译生命周期访问。

ConsoleLogOnBuildWebpackPlugin.js

function ConsoleLogOnBuildWebpackPlugin() {
  // ...
}

ConsoleLogOnBuildWebpackPlugin.prototype.apply = function(compiler){
  compiler.plugin('run', function(compiler, callback){
    console.log('webpack 构建过程开始')

    callback()
  })
} 


作为一个聪明的JavaScript开发者，你可能还记得function.prototype.apply方法。通过这个方法你可以把任意函数作为插件传递。你可以在配置中使用这样的方式来内联自定义插件。

用法

由于插件可以携带参数/选项，你必须在webpack配置中，向plugins属性传入new实例。
根据你的webpack用法，这里有多种方式使用插件。

配置

webpack.config.js
const HtmlWebpackPlugin = require('html-webpack-plugin')

const webpack = require('webpack')

const path = require('path')


module.exports = {
  entry: './path/to/my/entry/file.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use:　[
          'style-loader',
          'css-loader'
        ]
      }
    ]
  },
  plugins: [
    new webpack.optimize.UglifyJsPlugin(),
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]
}

Node Api
即使使用Node Api ,用户也应该在配置中传入plugins属性，compiler.apply并不是推荐的使用方式。