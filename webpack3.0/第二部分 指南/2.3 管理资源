管理资源

如果你是从开始一直遵循着指南的示例，现在会有一个小项目，显示"Hello webpack"。现在我们尝试整合一些其他资源，比如图像，看看webpack如何处理。

在webpack出现之前，前端开发人员会使用grunt和gulp等工具来处理资源，并将它们从/src文件夹移动到/dist或/build目录中。同样方式也被用于JavaScript模块，但是，像webpack这样的工具，将动态打包所有依赖项，这是极好的创举；因为现在每个模块都可以明确表述它自身的依赖，我们将避免打包未使用的模块。

webpack最出色的功能之一就是，除了JavaScript，还可以通过loader引入任何其他类型的文件。也就是说，以上列出的哪些JavaScript的优点，同样可以用来构建网站或web应用程序中的所有非JavaScript内容，让我们从Css开始起步，或许你可能已经熟悉了这个设置过程。

安装

在开始之前，让我们对项目做一个小的修改。

加载CSS

为了从JavaScript模块中import一个CSS文件，你需要在module配置中安装并添加style-loader和css-loader
npm install style-loader css-loader --save-dev

webpack.config.js

const path = require('path')

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      test: /\.css$/,
      use: [
        'style-loader',
        'css-loader'
      ]
    ]
  }
}

webpack根据正则表达式，来确定应该哪些文件，并将其提供给指定的loader。在这种情况下，以.css结尾的全部文件，都将被提供给style-loader和 css-loader.

这样你可以在依赖此样式的文件中import '.stle.css'.现在，当该模块运行时，含有CSS字符串的<style>标签，将被插入到html文件的<head>中

你也可以进行CSS分离，以便在生产环境中节省加载时间。最重要的是，现有的loader可以支持任何你可以想到的CSS处理器风格 -postcss, sass, less和stylus等。

加载图片
假想，现在我们正在下载CSS，但是我们的背景和围标这些图片，要如何处理呢？使用file-loader, url-loader,我们可以轻松地将这些内容混合到CSS中：
npm install --save-dev file-loader url-loader

webpack.config.js

const path = require('path')

module.exports = {
  entry: path.resolve(__dirname, './src/index.js'),
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist')
  },
  module: {
    rules: [
      test: /\.(gif|jpg|jpeg|png|svg)$/,
      use: {
        loader: 'url-loader',
        options: {
          limit: 1024
        }
      }
    ]
  }
}

加载字体
那么，像字体这样的其他资源如何处理呢?file-loader和url-loader可以接收并加载任何文件，然后将其输出到构建目录。这就是说，我们可以将它们用于任何类型的文件，包括字体，让我们更新webpack.config.js来处理字体文件：

const path = require('path')

module.exports = {
  module: {
    rules: [
      {
        test: /\.(woff|woff2|eot|ttf|otf)$/,
        use: ['file-loader']
      }
    ]
  }
}

加载数据
此外，可以加载的有用资源还有数据，如JSON文件，CSV，TSV,和XML。类似于NodeJS，JSON支持实际上是内置的，也就是说，import Data from './data.json'默认将正常运行，要导入CSV，TSV和XML，你可以使用csv-loader和xml-loader，让我们处理这三类文件：
npm install csv-loader xml-loader --save-dev

module.exports = {
  module: {
    rules: [
      {
        test: /\.(csv|tsv)$/,
        use: ['csv-loader']
      },
       {
        test: /\.xml$/,
        use: ['xml-loader']
      }
    ]
  }
}

全局资源
上述所有内容中最出色之处是，以这种方式加载资源，你可以以更直观的方式将模块和资源组合在一起。无需依赖于含有全部资源的/assets目录，而是将资源与代码组合在一起。