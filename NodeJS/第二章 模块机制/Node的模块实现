在Node中，模块分为两类：一类是Node提供的模块，称为核心模块，另一类是用户编写的模块，称为文件模块。

核心模块部分在Node源代码的编译过程中，编译进了二进制执行文件。在Node进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。

文件模块则是在运行时动态加载，需要完整的路径分析，文件定位，编译执行过程，速度比核心模块慢。


模块的加载过程

优先从缓存加载

Node对引入过的模块都会进行缓存，以减少二次引入时的开销，不同的地方在于，浏览顺仅仅缓存文件，而Node缓存的是编译和执行之后的对象。

无论是核心模块还是文件模块，require()方法对相同模块的二次加载都一律采用缓存优先的方式，这是第一优先级的。不同之处在于核心模块的缓存检查先于文件模块的缓存检查。

路径分析和文件定位

历为标识符有几种形式，对于不同的标识符，模块的查找和定位有不同程度上的差异。

1.模块标识符分析
require()方法接受一个标识符作为参数。在Node实现中，正是基于这样一个标识符进行模块查找的。模块标识符在Node中主要分为以下几类。
  1）核心模块，如http, fs, path等。
  2）.或..开始的相对路径文件模块。
  3）以/开始的绝对路径文件模块。
  4）非路径形式的文件模块，如自定义的connect模块。

  核心模块
  核心模块的优先级仅次于缓存加载，它在Node的源代码编译过程中已经编译为二进制代码，其加载过程最快。

  