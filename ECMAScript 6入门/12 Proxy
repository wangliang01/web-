概述

Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”，即对编程语言进行编程。

Proxy可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy这个词的愿意是代理，用在这里表示由它来“代理某些操作”，可以译为“代理器”。

var obj = new Proxy({}, {
  get: function(target, key, receiver) {
    console.log(`getting ${key}`)
    return Reflect.get(target, key, receiver)
  },
  set: function(target, key, value, receiver) {
    console.log(`setting ${key}`)
    return Reflect.set(target, key, value, receiver)
  }
})

上面代码对一个空对象架设了一层拦截，重定义了属性的读取(get)和设置(set)行为。 这里暂时先不解释具体的语法，只看运行结果，对设置了拦截行为的对象obj,去读写它的属性，就会得到下面的结果

obj.count = 1
// setting count
++obj.count
// getting count
// setting count
// 2

上面代码说明，Proxy实际上重载了点运算符，即用自己的定义覆盖了语言的原始定义。

ES6原生提供Proxy构造函数，用来生成Proxy实例。
var proxy = new Proxy(target, handler)

Proxy对象的所有用法，都是上面这种形式，不是的只是handler参数的写法。其中，new Proxy()表示生成一个Proxy实例，target参数表示要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。

下面是另一个拦截读取属性行为的例子。

var proxy = new Proxy({}, {
  get: function(target, key, receiver) {
    return 35;
  }
})

上面代码中，作为构造函数，Proxy接受两个参数，第一个参数是所要代理的目标对象（上例是一个空对象），即如果没有Proxy的介入，操作原来要访问的就是这个对象，第二个参数就是一个配置对象，对于每个被代理的操作，需要提供一个对应的处理函数，该函数将拦截对应的操作，比如，上面代码中，配置对象有一个get方法，用来拦截对目标对象属性的访问请求。get方法的两个参数分别是目标对象和所要访问的属性。

注意，要使得Proxy起作用，必须针对Proxy实例进行操作，而不是针对目标对象进行操作。

如果handler没有设置任何拦截，那就等同于直接通向原对象。

var target = {}
var handler = {}
var proxy = new Proxy(target, handler)
proxy.a = 'b'
target.a // 'b'

上面的代码中，handler是一个空对象，没有任何拦截效果，访问proxy就等同于访问target.

一个技巧是将Proxy对象，设置到object.proxy属性，从而可以在object对象上调用。

var object = {proxy: new Proxy(target, handler)}

Proxy实例也可以作为其他对象的原型对象。
var proxy = new Proxy({}, {
  get: function(target, key, receiver) {
    return 35
  }
})

let obj = Object.create(proxy)
obj.time // 35

上面代码中，proxy对象是obj对象的原型，obj对象本身并没有time属性，所以根据原型链，会在proxy对象上读取该属性，导致被拦截。

同一个拦截器函数，可以设置拦截多个操作。

var handler = {
  get: function(target, name) {
    if (name === 'prototype') {
      return Object.prototype
    }
    return 'Hello,  ' + name
  },
  apply: function(target, thisBinding, args) {
    return args[0]
  },
  construct: function(target, args) {
    return {
      value: args[1]
    }
  }
}

var fproxy = new Proxy(function(x, y) {
  return x + y
}, handler)

fproxy(1, 2)

对于可以设置，但没有设置拦截的操作，则直接落在目标对象上，按照原先的方式产生结果。

下面是Proxy支持的拦截操作一览，一共13种。

get(target, propKey, receiver): 拦截对象属性的读取，比如proxy.foo和proxy['foo'].

set(target, propKey, value, receiver): 拦截对象属性的设置， 比如proxy.foo = v 或proxy['foo'] = v， 返回一个布尔值。

has(target, propKey): 拦截propKey in proxy的操作，返回一个布尔值。

deleteProperty(target, propKey): 拦截delete proxy[propKey]的操作，返回一个布尔值。

ownKeys(target): 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、
for ... in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。

getOwnPropertyDescriptor(target, propkey): 拦截Object.getOwnPropertyDescriptor(proxy, propKey),返回属性的描述对象。

defineProperty(target, propKey, propDesc): 拦截Object.defineProperty(proxy, propKey, propDesc),Object.defineProperties(proxy, propDescs)返回一个布尔值。
preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。
getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。
isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。
setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。
apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。
construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。

2.Proxy实例的方法
下面是上面这些拦截方法的详细介绍。

get()
get方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象，属性名和proxy实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。

get方法的用法，上文已经有一个例子，下面是另一个拦截读取操作的例子。

var person = {
  name: '张三'
}

var proxy = new Proxy(person, {
  get: function(target, propkey) {
    if (propKey in target) {
      return target[propKey]
    } else {
      throw new ErferenceError('Property not exist)
    }
  }
})

var person = {
  name: '张三'
}

var proxy = new Proxy(person, {
  get: function(target, propKey) {
    if (Reflect.has(target, propKey)) {
      return target[propKey]
    } else {
      throw Error(`property ${propKey} dose not exist`)
    }
  }
})

get方法可以继承
let proto = new Proxy({}, {
  get: function(target, propKey, receiver) {
    console.log('GET ' + propKey)
    return target[propKey]
  }
})

let obj = Object.create(proto)

obj.foo

上面代码中，拦截操作定义中Prototype对象上面，所以如果读取obj对象继承的属性时，拦截会生效。

下面的例子使用get拦截，实现数组读取负数的索引。

function createArray(...elements) {

}

Proxy 实例的方法
Proxy.revocable()
this 问题
实例：Web 服务的客户端