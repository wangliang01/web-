1.let命令

基本用法
ES6新增了let命令，用来声明变量。它的用法类似于var,但是所声明的变量，只在let命令所在的
代码块有效。
{
    let a = 10;
    var b = 1;
}

a // REferenceError: a is not defined
b // 1

上面代码在代码块之中，分别用let和var声明了两个变量，然后在代码块之外调用这两
个变量，结果let声明的变量报错，var声明的变量返回了正确的值。这表明,let声明的变量
只在它所在的代码块有效。

for循环的计数器，就很合适使用let命令
for (let i = 0; i< 10; i++) {

    // ...
}

console.log(i)
// REferenceError: i is not defined

上面代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。

下面的代码如果使用var,最后输出的是10

var a = []

for (var i = 0; i < 10; i++) {

    a[i] = function () {
        console.log(i)
    }
}

a[6]() // 10

上面代码中，变量i是var命令声明的，在全局范围内都有效，所在全局只有一个变量i。每
一次循环，变量i的值都会发生改变，而循环内铺好床买噶给数组a的函数内部的console.log(i)
里面的i指向全局的i。也就是说，所有数组a的成员里面的i,指向的都是同一个i,导致运行时输出 的最后一
轮的i的值，也就是10

如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6

var a = []

for (let i = 0; i < 10; i++) {
    a[i] = function () {
        console.log(i)
    }
}

a[6]()

另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体
内部是一个单独的子作用域。

for (let i = 0; i < 3; i++) {
    let i = 'abc'
    console.log(i)
}

// abc
// abc
// abc

上面代码正确运行，输出了3次abc。这表明函数内部的变量i与循环变量i不在同一个作用
域，有各自单独的作用域。

不存在变量提升

var 命令会发生"变量提升"现象，即变量可以在声明之前使用，值为undefined.这种
现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。
为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则
报错。

// var 的情况
console.log(foo)  // 输出undefined

var foo = 2

// let 的情况

console.log(bar)  // 报错

let bar = 2

上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经
存在了，但是没有值，所以会输出undefined.变量bar用let命令声明，不会发生变量提升。
这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。

暂时性死区

只要块级作用域内存在let命令，它所声明的变量就“绑定”这个区域，不再受外部的影响。
var tmp = 123

if (true) {
    tmp = 'abc' // 报错
    let tmp
}

上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定
这个块级作用域，所以在let声明变量前，对tmp赋值会报错。

ES6明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，之一开
始就形成了封闭作用域，凡是在声明之前使用这些变量，就会报错。

总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，
称为"暂时性死区"（temporal dead zone, 简称TDZ）

在let命令声明变量tmp之前，都属于tmp的死区

暂时性死区也意味着typeof 不再是一个百分之百安全的操作

typeof x 

let x

不允许重复声明

let 不允许在相同作用域内，重复声明同一个变量


为什么需要块级作用域？
ES5只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景

第一种场景，内层变量可能覆盖外层变量

var tmp = new Date()

function f() {
    console.log(tmp)
    if (false) {
        var tmp = 'hello world'
    }
}

f()


ES6的块级作用域

let 实际上为JavaScript新增了块级作用域

function f1() {
    let n = 5
    if (true) {
        let n = 10
    }
    console.log(n) // 5
}

上面的函数有两个代码块，都声明了变量，运行后输出5，这表示外层代码块不受内层代码
块影响，如果两次都使用var定义变量n，最后输出的值才是10

外层作用域无法读取内层作用域的变量。

内层作用域可以定义外层作用域的同名变量

块级作用域的出现，实际上使得获得广泛应用的立即执行函数表达式（IIFE）不再必要了

块级作用域与函数声明
ES5规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。

ES6引入了块级作用域，明确允许在块级作用域之中声明函数，ES6规定，块级作用域之中，函数声明语
句的行为类似于let,在块级作用域之外不可引用


const

const声明一个只读的常量，一旦声明，常量的值就不能改变

const PI = 3.1415

PI = 3 // 报错

const 声明的变量不得改变值 ，这意味着， const一量声明变量，就必须立即初始化，不能
留到以后赋值。
const foo // SyntaxError: Missing initializerr in const declaration

对于const来说，只声明不赋值， 就会报错

const的作用域与let命令相同：只在声明所在的块级作用域内有效

if (true) {
    const MAX = 5
}

MAX  // 报错

const命令声明的常量也是不提升，同样存在暂时性死区，只在在声明的位置后面使用。

if (true) {
    console.log(MAX) // 报错
    const MAX = 5
}

const 声明的常量，也与let一样不可重复声明

const MAX = 5

const MAX = 10

本质：
const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址不得改动
。对于简单类型的数据（数值，字符串，布尔值），值就保存在变量指向的那个内存地址，
因此等同于常量。但是对于复合类型的数据（如对象，数组），变量指向的内存地址，保存的
只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就
完全不能控制了。因此，将一个对象声明为常量必须非常小心

const foo = {}

foo.prop = 123  // 没问题

foo = {} // 报错，地址发生了变化

如果真像将对象冻结，应该使用Object.freeze方法

const foo = Object.freeze({})
//常规模式时，下同一行不起作用
//严格模式时，该行会报错

foo.prop = 1223

ES6声明变量的六种方法

ES5: var 和 function
ES6： let和const import 和 export