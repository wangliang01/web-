1.数组的解构赋值 
2.对象的解构赋值
3.字符串的解构赋值
4.数值和布尔值的解构赋值
5.函数参数的解构赋值
6.圆括号问题
7.用途

一。数组的解构赋值

基本用法

ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构

以前，为变量赋值，只能直接指定值。

let a = 1

let b = 2

let c = 3

ES6允许写成下面这样

let [a, b, c] = [1, 2, 3]

上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。

本质上，这种写法属于模式匹配，只要等号两边的模式相同，左边的变量就会被赋予对应的值，下面是一些使用嵌套数组进地解构的例子。

let [foo, [bar], baz] = [1, [2], 3]
// foo: 1, bar: 2, baz: 3

let [, , third] = ['foo', 'bar', 'baz']
// third: 'baz'

let [x, , y] = [1, 2, 3]
// x: 1, y: 3

let [head, ...tail] = [1, 2, 3, 4]
// head: 1, tail: [2, 3, 4]

let [x, y, ...z] = ['a']
// x: 'a', y: undefined, z: []

如果解构不成功，变量的值就等于undefined
let [foo] = []
let [bar, foo] = [1]

以上两种情况属于解构不成功，foo的值都会等于undefined

另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
let [x, y] = [1, 2, 3]
// x: 1, y: 2

let [a, [b], d] = [1, [2, 3], 4]
// a: 1, b: 2, d: 4

上面两个例子都是不完全解构

如果等号右边是不可遍历结构,那么会报错。
报错
let [foo] = 1
let [foo] = false
let [foo] = NaN
let [foo] = undefined
let [foo] = null
let [foo] = {}

对于Set结构，也可以使用数组的解构赋值。
let [x, y, z] = new Set(['a', 'b', 'c'])

默认值
解构赋值允许指定默认值
let [foo = true] = []
// foo: true

let [x, y = 'b'] = ['a']
// x: 'a', y: 'b'

let [x, y = 'b'] = ['a', undefined]
// x: 'a', y:'b'

注意：ES6内部使用严格相等运算符，判断一个位置是否有值，所以只有当一个数组成员严格等于undefined,默认值才会生效



