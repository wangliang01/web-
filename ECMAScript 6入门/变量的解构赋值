1.数组的解构赋值 
2.对象的解构赋值
3.字符串的解构赋值
4.数值和布尔值的解构赋值
5.函数参数的解构赋值
6.圆括号问题
7.用途

一。数组的解构赋值

基本用法

ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构

以前，为变量赋值，只能直接指定值。

let a = 1

let b = 2

let c = 3

ES6允许写成下面这样

let [a, b, c] = [1, 2, 3]

上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。

本质上，这种写法属于模式匹配，只要等号两边的模式相同，左边的变量就会被赋予对应的值，下面是一些使用嵌套数组进地解构的例子。

let [foo, [bar], baz] = [1, [2], 3]
// foo: 1, bar: 2, baz: 3

let [, , third] = ['foo', 'bar', 'baz']
// third: 'baz'

let [x, , y] = [1, 2, 3]
// x: 1, y: 3

let [head, ...tail] = [1, 2, 3, 4]
// head: 1, tail: [2, 3, 4]

let [x, y, ...z] = ['a']
// x: 'a', y: undefined, z: []

如果解构不成功，变量的值就等于undefined
let [foo] = []
let [bar, foo] = [1]

以上两种情况属于解构不成功，foo的值都会等于undefined

另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
let [x, y] = [1, 2, 3]
// x: 1, y: 2

let [a, [b], d] = [1, [2, 3], 4]
// a: 1, b: 2, d: 4

上面两个例子都是不完全解构

如果等号右边是不可遍历结构,那么会报错。
报错
let [foo] = 1
let [foo] = false
let [foo] = NaN
let [foo] = undefined
let [foo] = null
let [foo] = {}

对于Set结构，也可以使用数组的解构赋值。
let [x, y, z] = new Set(['a', 'b', 'c'])

默认值
解构赋值允许指定默认值
let [foo = true] = []
// foo: true

let [x, y = 'b'] = ['a']
// x: 'a', y: 'b'

let [x, y = 'b'] = ['a', undefined]
// x: 'a', y:'b'

注意：ES6内部使用严格相等运算符，判断一个位置是否有值，所以只有当一个数组成员严格等于undefined,默认值才会生效

let [x = 1] = [undefined]
// x: 1
let [x = 1] = [null]
// x: null

如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。
function f() {
  console.log('aaa')
}

let [x = f()] = [1]
x: 1

let [x = 1, y = x] = []
// x: 1, y:１

let [x = 1, y = x] = [2]
// x: 2, y: 2

let [x = 1, y = x]= [1, 2]
// x: 1, y: 2

let [x = y, y = 1] = []
// y is not defined

2.对象有解构赋值

解构仅可以用于数组，还可以用于对象
let {foo, bar} = {foo: 'aaa', bar: 'bbb'}
foo: 'aaa', bar: 'bbb'

对象的解构与数组有一个重要的不同，数组的元素是按次序排列的，变量的取值由它的位置决定
而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。

let {bar: foo} = {foo: 'aaa', bar: 'bbb'}

foo: 'aaa'

bar: 'bbb'

如果变量名与属性名不一致，必须写成下面这样。

let {foo: baz} = {foo: 'aaa', bar: 'bbb'}
baz: 'aaa'

这说明，对象的解构赋值是下面形式的简写
let {foo: foo, bar: bar} = {foo: 'aaa', bar: 'bbb'}

也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。
真正被赋值的是后者，而不是前者。

let {foo: baz} = {foo: 'aaa', bar: 'bbb'}
baz: 'aaa',
foo: foo is not defined

与数组一样，解构也可以用于嵌套结构的对象。

let obj = {
  p: [
    'hello',
    {y: 'world'}
  ]
}

对象的解构也可以使用默认值
var {x = 3} = {}

默认值生效的条件是，对象的属性值严格等于undefined

var {x = 3} = {x: undefined}
// x: 3
var {x = 3} = {x: null}
// x: null

如果解构失败，变量的值等于undefined
let {foo} = {bar: 'baz'}
foo: undefined


如果要将一个已经声明的变量用于解构赋值，必须非常小心。
//错误的写法
let x 
{x} = {x: 1}
// syntaxError: syntax error
上面的代码的写法会报错，因为JavaScript引擎会将{x}理解成一个代码块，从而发生语法错误
。只有不将大括号写在行首，避免JavaScript将其解释为代码块，才能解决这个问题。

正确的写法
let x 
({x} = {x: 1})

对象的解构赋值，可以很方便地将现有对象的方法赋值到某个变量。

let {log, sin, cos} = Math

3.字符串的解构赋值
字符串也可以解构赋值，这是因为此时，字符串被转换成了一个类似数组的对象。
const [a, b, c, d, e] = 'hello'
// a: 'h', b: 'e', c: 'l', d: 'l', e: 'o'

类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值
let {length: len} = 'hello'
len: 5

4.数值和布尔值的解构赋值
解构赋值时，如果等号右边是数值和布尔值，则会先转为对象
let {toString: s} = 123
s === Number.prototype.toString

let {toString: s} = true
s === Boolean.prototype.toString

上面代码中，数值和布尔值的包装对象都有toString属性，因此变量都能取到值。

解构赋值的规则是，只要等号右边的值不是对象或数组，将先将其转为对象。由于undefined和null无法
转为对象，所以对它们进行解构赋值，都会报错。

let {prop: x} = undefined // TypeError
let {prop: y} = null // TypeEror

函数参数的解构赋值
函数的参数也可以使用解构赋值
function add([x, y]) {
  return x + y
}

add([1, 2]) // 3

函数参数的解构也可以使用默认值
function move({x = 0, y = 0} = {}) {
  return [x, y]
}

圆括号问题

不能使用圆括号的情况

1）变量声明语句
let [(a)] = [1]
let {x: (c)} = {}
let ({x: c}) = {}
let {(x: c)} = {}
let {(x): c} = {}
let {o: ({p: p})} = {o: {p: 2}}

2)函数参数
函数参数也属于变量声明，因些不能带有圆括号。
function f([(z)]) {return z}

function f([z, (x)]) {return x}

3)赋值语句的模式
({p: a}) = {p: 42}
([a]) = [5]

用途：
1）交换变量的值
let x = 1
let y = 2
[x, y] = [y, x]

2)从函数返回多个值
function example() {
  return [1, 2, 3]
}

let [a, b, c] = example()

3)函数参数的定义
function f([x, y, z]) {
  ...
}

4)提取JSON数据

5）函数参数的默认值

6)遍历map结构

7）输入模块的指定方法


