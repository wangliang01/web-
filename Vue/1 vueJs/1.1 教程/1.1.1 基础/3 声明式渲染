声明式渲染

Vue.js的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进DOM的系统：

<div id="app">
  {{message}}
</div>

var app = new Vue({
  el: '#app'
  data() {
    return {
      message: 'Hello Vue'
    }
  }
})

我们已经成功创建了第一个Vue应用！看起来这跟渲染一个字符模板非常类似，但是Vue在背后做了大量工作。现在数据和DOM已经被建立了关联，所有东西都是响应式的。我们要怎么确认呢？打开你的浏览器的JavaScript，并修改app.message的值，你将看到上例相应地更新。

除了上文插值，我们还可以像芝样来绑定元素特性
<div id="app-2">
  <span v-bind:title="message">
    查看此处动态提示信息
  </span>
</div>

var app2 = new Vue({
  el: '#app-2',
  data: {
    message: '页面加载于' + new Date().toLocalString()
  }
})

这里我们遇到了一点新东西。你看到的v-bind特性被称为指令。指令带有前缀v-,以表示它们是Vue提供的特殊特性。可能你已对猜到了，它们会在渲染的DOM上应用特殊的响应式行为。在这里，该指令的意思：“将这个元素节点的title特性和Vue实例message属性保持一致”。