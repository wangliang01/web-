数组更新检测

1.变异方法

Vue包含一组观察数组的变异方法，所以它们也将会触发视图更新，这些方法如下：

push()
pop()
shift()
unshift()
splice()
sort()
reverse()

你打开控制台后，然后在前面的例子的items数组调用变异方法： example1.items.push({message: 'Baz'})

2.替换数组

变异方法，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异方法，例如：filter(), concat()和slice().这些方法不会改变原始数组，但总是返回一个新数组，当使用非变异方法时，可以用新数组替换旧数组：

example1.items = example1.items.filter(item => {
  return item.message.match(/Foo/)
})

你可能认为这将导致Vue丢弃现有DOM并重新渲染整个列表。幸运的是，事实并非如此。Vue为了使得DOM元素得到最大范围的重用而实现了一些智能，启发式的方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。

3.注意事项

由于JavaScript的限制，Vue不能检测以下变动的数组：

1.当你利用索引直接设置一个项时，例如：vm.items[indexOfItem] = newValue
2.当你修改数组的长度时，例如：vm.items.length = newLength

举个例子：

var vm = new Vue({
  data: {
    items: ['a', 'b', 'c']
  }
})

vm.items[1] = 'x' // 不是响应性的
vm.items.length = 2 //不是响应性的

为了解决第一类问题，以下两种方式都可以实现和vm.items[indexOfItem] = newValue相同的效果，同时也将触发状态更新：

// Vue.set 
Vue.set(vm.items, indexOfItem, newValue)

// Array.prototype.splice 
vm.items.splice(indexOfItem, 1, newValue)

你也可以使用vm.$set实例方法，该方法是全局方法Vue.set的一个别名
vm.$set(vm.items, indexOfItem, newValue)

为了解决第二类问题，你可以使用splice
vm.items.splice(newLength)

