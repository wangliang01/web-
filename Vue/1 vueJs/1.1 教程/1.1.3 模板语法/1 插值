插值

1.文本
数据绑定最常见的形式就是使用"Mustache"语法(双大括号)的文本插值：
<span>Message: {{msg}} </span>

Mustache标签将会被替代为对应数据对象上msg属性的值。无论何时，绑定的数据对象上msg属性发生了改变，插值处的内容都会更新。

通过使用v-once指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新，但请留心这会影响到该节点上的其它数据绑定：

<span v-once> 这个将不会改变：{{msg}}</span>

2.原始HTML

双大括号会将数据解释为普通文本，而非HTML代码。为了输出真正的HTML，你需要使用v-html指令：
<span v-html="rawHtml"></span>

这个span的内容会被替换成为属性值rawHtml，直接作为HTML---会忽略解析属性值中的数据绑定。注意，你不能使用v-html来复合局部模板，因为Vue不是基于字符串的模板引擎。反之，对于用户界面(UI),组件更适合作为可重用和可组合的基本单位。

注意：你的站点上动态渲染的任意HTML可能会非常危险，因为它很容易导致XSS攻击。请只对可信内容使用HTML插值，绝不要对用户提供的内容使用插值。

3.特性
Mustache语法不能作为HMTL特性上，遇到这个情况应该使用v-bind指令：
<div b-bind:id="dynamicId"></div>

在布尔特性的情况下，它们的存在即暗示为true,v-bind工作起来略有不同， 在这个例子中：
<button v-bind:disabled="isButtonDisabled">Button</button>

如果isButtonDisabled的值是null、undefined或false,则disabled特性甚至不会被包含在渲染出来的<button>元素中。

4. 使用JavaScript表达式
迄今为止，在我位的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js都提供了完全的JavaScript表达式支持。
{{number + 1}}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div v-bind:id="'list-' + id"></div>

这些表达式会在所属Vue实例的数据作用域下作为JavaScript被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。

<!-- 这是语句，不是表达式 -->
{{ var a = 1 }}

<!-- 流控制也不会生效，请使用三元表达式 -->
{{ if (ok) { return message } }}

注意：模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。