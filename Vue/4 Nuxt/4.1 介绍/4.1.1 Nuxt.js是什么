关于Nuxt.js

2016年10月25日，zeit.co背后的团队对外发布了Next.js，一个React的服务端渲染应用框架。几个小时后，与Next.js异曲同工，一个基于Vue.js的服务端渲染应用框架应运而生，我们称之为：Nuxt.js。 

Nuxt.js是什么？

Nuxt.js是一个基于Vue.js的通用应用框架。

通过对客户端/服务端基础架构的抽象组织，Nuxt.js主要关注的是应用的UI渲染。

我们的目录是创建一个灵活的应用框架，你可以基于它初始化新项目的基础结构代码，或者在已有Node.js项目中使用Nuxt.js。 

Nuxt.js预设了利用Vue.js开发服务端渲染的应用所需要的各种配置。

除此之外，我们还提供了一种命令叫：nuxt generate,为基于Vue.js的应用提供生成对应的静态站点的功能。

我们相信这个命令所提供的功能，是向开发集成各种微服务(microservices)的Web应用迈开的新一步。

作为框架，Nuxt.js为客户端/服务端 这种典型的应用架构模式提供了许多有用的特性，例如异步数据加载、中间件支持、布局支持等。

Nuxt.js框架是如何运作的?

Nuxt.js集成了以下组件/框架，用于开发完整而强大的Web应用:

Vue 2

Vue-Router

Vuex

Vue-Meta

压缩并gaip后，总代码大小为:28kb

另外，Nuxt.js使用Webpack和vue-loader,babel-loader来处理代码的自动化构建工作（如打包，代码分层，压缩等）。

特性

基于Vue.js 

自动代码分层

服务端渲染

强大的路由功能，支持异步数据

静态文件服务

ES6/ES7语法支持

打包和压缩JS和CSS

HTML头部标签管理

本地开发支持热加载

集成ESLint

支持各种样式预处理器：SASS,LESS,Stylus等等

流程图

下面阐述了Nuxt.js应用一个完整的服务器请求到渲染的流程：


服务端渲染

你可以使用Nuxt.js作为你项目的UI渲染框架。

当运行nuxt命令时，会启动一个支持，热加载和服务端渲染(基于Vue.js的 vue-server-renderer 模块)的开发服务器。

如果你的项目有自己的WEB服务器（例如用Express.js启动的Web服务），你仍然可以将Nuxt.js当作是中间件来使用，负责UI渲染部分的功能。在开发通用的Web应用过程中，Nuxt.js是可插拔的，没有太多的限制，可通过开发编码中使用Nuxt.js了解更多的信息。

静态化

支持Vue.js应用的静态化算是Nuxt.js的一个创新占，通过nuxt generate命令实现。

该命令依据应用的路由配置将每一个路由静态化成对应的HTML文件。

例子：
-| pages/
---| about.vue
---| index.vue


静态化后变成：

-| dist/
---| about/
------| index.HTML
---| index.html

静态化可以让你的任何一个静态站点服务商托管你的Web应用。
Nuxt.js的官网是一个绝佳的例子，它静态化后托管于Github Pages

我们进一步考虑下电商应用的场景，利用 nuxt generate，是不是可以将应用静态化后部署在CDN服务器，每当一个商品的库存发生变化时，就重新静态化下，更新下商品的库存。但是如果用户访问的时候恰巧更新了呢？我们可以通过调用电商的API，保证用户访问的是最新的数据。这样相对于传统的电商应用来说，这种静态化的方案可以大大节省服务器的资源。